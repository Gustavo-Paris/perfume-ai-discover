import { useState, useEffect } from 'react';
import { useAuth } from '@/contexts/AuthContext';
import { supabase } from '@/integrations/supabase/client';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/hooks/use-toast';
import { Phone, Mail, MessageSquare, Clock, CheckCircle } from 'lucide-react';

interface SACTicket {
  id: string;
  protocol_number: string;
  category: string;
  subject: string;
  description: string;
  status: string;
  priority: string;
  created_at: string;
  updated_at: string;
  resolution?: string;
  satisfaction_rating?: number;
}

const SAC = () => {
  const { user } = useAuth();
  const { toast } = useToast();
  const [tickets, setTickets] = useState<SACTicket[]>([]);
  const [loading, setLoading] = useState(false);
  const [showForm, setShowForm] = useState(false);
  const [formData, setFormData] = useState({
    category: '',
    subcategory: '',
    subject: '',
    description: '',
    customer_name: '',
    customer_email: user?.email || '',
    customer_phone: '',
    order_number: ''
  });

  useEffect(() => {
    document.title = 'SAC - Atendimento ao Cliente | Paris & Co Parfums';
    if (user) {
      loadTickets();
    }
  }, [user]);

  const loadTickets = async () => {
    if (!user) return;
    
    const { data, error } = await supabase
      .from('sac_tickets')
      .select('*')
      .eq('user_id', user.id)
      .order('created_at', { ascending: false });

    if (!error && data) {
      setTickets(data);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);

    try {
      const { error } = await supabase
        .from('sac_tickets')
        .insert([{
          user_id: user?.id || null,
          category: formData.category,
          subcategory: formData.subcategory || null,
          subject: formData.subject,
          description: formData.description,
          customer_name: formData.customer_name,
          customer_email: formData.customer_email,
          customer_phone: formData.customer_phone || null,
          order_number: formData.order_number || null,
          priority: 'normal',
          protocol_number: '' // Will be auto-generated by trigger
        }]);

      if (error) throw error;

      toast({
        title: "Solicitação enviada!",
        description: "Você receberá um número de protocolo por e-mail em breve.",
      });

      setShowForm(false);
      setFormData({
        category: '',
        subcategory: '',
        subject: '',
        description: '',
        customer_name: '',
        customer_email: user?.email || '',
        customer_phone: '',
        order_number: ''
      });
      
      if (user) loadTickets();
    } catch (error) {
      toast({
        title: "Erro",
        description: "Não foi possível enviar sua solicitação. Tente novamente.",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const getStatusBadge = (status: string) => {
    const variants = {
      'aberto': 'destructive',
      'em_andamento': 'default',
      'aguardando_cliente': 'secondary',
      'resolvido': 'outline',
      'fechado': 'outline'
    } as const;

    const labels = {
      'aberto': 'Aberto',
      'em_andamento': 'Em Andamento',
      'aguardando_cliente': 'Aguardando Cliente',
      'resolvido': 'Resolvido',
      'fechado': 'Fechado'
    };

    return (
      <Badge variant={variants[status as keyof typeof variants] || 'default'}>
        {labels[status as keyof typeof labels] || status}
      </Badge>
    );
  };

  const getPriorityBadge = (priority: string) => {
    const variants = {
      'baixa': 'outline',
      'normal': 'secondary',
      'alta': 'default',
      'urgente': 'destructive'
    } as const;

    const labels = {
      'baixa': 'Baixa',
      'normal': 'Normal',
      'alta': 'Alta',
      'urgente': 'Urgente'
    };

    return (
      <Badge variant={variants[priority as keyof typeof variants] || 'secondary'}>
        {labels[priority as keyof typeof labels] || priority}
      </Badge>
    );
  };

  return (
    <div className="min-h-screen bg-background">
      <div className="container mx-auto px-4 py-8 max-w-6xl">
        <div className="mb-8">
          <h1 className="text-4xl font-display font-bold text-foreground mb-4">
            SAC - Atendimento ao Cliente
          </h1>
          <p className="text-muted-foreground text-lg">
            Estamos aqui para ajudar! Entre em contato conosco através dos canais abaixo 
            ou abra uma solicitação de atendimento.
          </p>
        </div>

        {/* Canais de Atendimento */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
          <Card>
            <CardContent className="p-6 text-center">
              <Phone className="h-12 w-12 text-primary mx-auto mb-4" />
              <h3 className="font-semibold text-lg mb-2">Telefone</h3>
              <p className="text-muted-foreground mb-3">
                Segunda a Sexta: 9h às 18h<br />
                Sábado: 9h às 14h
              </p>
              <p className="font-mono text-lg">(11) 0000-0000</p>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6 text-center">
              <Mail className="h-12 w-12 text-primary mx-auto mb-4" />
              <h3 className="font-semibold text-lg mb-2">E-mail</h3>
              <p className="text-muted-foreground mb-3">
                Resposta em até 24h<br />
                dias úteis
              </p>
              <a 
                href="mailto:sac@pariscoparfums.com.br" 
                className="text-primary hover:underline font-mono"
              >
                sac@pariscoparfums.com.br
              </a>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6 text-center">
              <MessageSquare className="h-12 w-12 text-primary mx-auto mb-4" />
              <h3 className="font-semibold text-lg mb-2">Atendimento Online</h3>
              <p className="text-muted-foreground mb-3">
                Abra uma solicitação<br />
                e acompanhe o status
              </p>
              <Button onClick={() => setShowForm(true)}>
                Nova Solicitação
              </Button>
            </CardContent>
          </Card>
        </div>

        {/* Formulário de Nova Solicitação */}
        {showForm && (
          <Card className="mb-8">
            <CardHeader>
              <CardTitle>Nova Solicitação de Atendimento</CardTitle>
            </CardHeader>
            <CardContent>
              <form onSubmit={handleSubmit} className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="category">Categoria *</Label>
                    <Select 
                      value={formData.category} 
                      onValueChange={(value) => setFormData(prev => ({ ...prev, category: value }))}
                      required
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Selecione uma categoria" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="duvida">Dúvida</SelectItem>
                        <SelectItem value="reclamacao">Reclamação</SelectItem>
                        <SelectItem value="sugestao">Sugestão</SelectItem>
                        <SelectItem value="troca_devolucao">Troca/Devolução</SelectItem>
                        <SelectItem value="cancelamento">Cancelamento</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <Label htmlFor="order_number">Número do Pedido (opcional)</Label>
                    <Input
                      id="order_number"
                      value={formData.order_number}
                      onChange={(e) => setFormData(prev => ({ ...prev, order_number: e.target.value }))}
                      placeholder="Ex: PC123456"
                    />
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="customer_name">Nome Completo *</Label>
                    <Input
                      id="customer_name"
                      value={formData.customer_name}
                      onChange={(e) => setFormData(prev => ({ ...prev, customer_name: e.target.value }))}
                      required
                    />
                  </div>

                  <div>
                    <Label htmlFor="customer_phone">Telefone (opcional)</Label>
                    <Input
                      id="customer_phone"
                      value={formData.customer_phone}
                      onChange={(e) => setFormData(prev => ({ ...prev, customer_phone: e.target.value }))}
                      placeholder="(11) 99999-9999"
                    />
                  </div>
                </div>

                <div>
                  <Label htmlFor="customer_email">E-mail *</Label>
                  <Input
                    id="customer_email"
                    type="email"
                    value={formData.customer_email}
                    onChange={(e) => setFormData(prev => ({ ...prev, customer_email: e.target.value }))}
                    required
                  />
                </div>

                <div>
                  <Label htmlFor="subject">Assunto *</Label>
                  <Input
                    id="subject"
                    value={formData.subject}
                    onChange={(e) => setFormData(prev => ({ ...prev, subject: e.target.value }))}
                    required
                    placeholder="Descreva brevemente o motivo do contato"
                  />
                </div>

                <div>
                  <Label htmlFor="description">Descrição *</Label>
                  <Textarea
                    id="description"
                    value={formData.description}
                    onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
                    required
                    rows={5}
                    placeholder="Descreva sua solicitação com o máximo de detalhes possível"
                  />
                </div>

                <div className="flex gap-4">
                  <Button type="submit" disabled={loading}>
                    {loading ? 'Enviando...' : 'Enviar Solicitação'}
                  </Button>
                  <Button type="button" variant="outline" onClick={() => setShowForm(false)}>
                    Cancelar
                  </Button>
                </div>
              </form>
            </CardContent>
          </Card>
        )}

        {/* Tickets do Usuário */}
        {user && tickets.length > 0 && (
          <Card>
            <CardHeader>
              <CardTitle>Suas Solicitações</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {tickets.map((ticket) => (
                  <div key={ticket.id} className="border rounded-lg p-4">
                    <div className="flex flex-col md:flex-row md:items-center justify-between mb-3">
                      <div className="flex items-center gap-3 mb-2 md:mb-0">
                        <span className="font-mono text-sm font-semibold">
                          {ticket.protocol_number}
                        </span>
                        {getStatusBadge(ticket.status)}
                        {getPriorityBadge(ticket.priority)}
                      </div>
                      <div className="flex items-center gap-2 text-sm text-muted-foreground">
                        <Clock className="h-4 w-4" />
                        {new Date(ticket.created_at).toLocaleDateString('pt-BR')}
                      </div>
                    </div>
                    
                    <h4 className="font-semibold mb-2">{ticket.subject}</h4>
                    <p className="text-muted-foreground text-sm mb-3 line-clamp-2">
                      {ticket.description}
                    </p>
                    
                    {ticket.resolution && (
                      <div className="bg-green-50 border border-green-200 rounded-lg p-3 mt-3">
                        <div className="flex items-center gap-2 mb-2">
                          <CheckCircle className="h-4 w-4 text-green-600" />
                          <span className="font-semibold text-green-800">Resolução:</span>
                        </div>
                        <p className="text-green-700 text-sm">{ticket.resolution}</p>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        )}

        {/* Informações Úteis */}
        <div className="mt-8 bg-muted rounded-lg p-6">
          <h3 className="font-semibold text-lg mb-4">Informações Úteis</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
            <div>
              <h4 className="font-semibold mb-2">Horário de Atendimento:</h4>
              <ul className="space-y-1 text-muted-foreground">
                <li>Segunda a Sexta: 9h às 18h</li>
                <li>Sábado: 9h às 14h</li>
                <li>Domingo e Feriados: Fechado</li>
              </ul>
            </div>
            <div>
              <h4 className="font-semibold mb-2">Tempo de Resposta:</h4>
              <ul className="space-y-1 text-muted-foreground">
                <li>Telefone: Imediato</li>
                <li>E-mail: Até 24h (dias úteis)</li>
                <li>Solicitação Online: Até 24h</li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default SAC;